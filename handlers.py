from aiogram import Router, types, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from datetime import datetime
from utils import calculate_birthday_time

router = Router()

users = {}

@router.message(F.text.lower().in_({"–º–æ–π –¥—Ä", "–º–æ–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "/birthday", "–¥—Ä"}))
async def handle_birthday(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13.06):")
        users[user_id] = {"stage": "awaiting_birthday"}
        return

    user_data = users[user_id]
    if "birthday" not in user_data:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13.06):")
        users[user_id]["stage"] = "awaiting_birthday"
        return

    now = datetime.utcnow()
    bday_str = user_data["birthday"]
    bday = datetime.strptime(bday_str, "%d.%m")
    time_left = calculate_birthday_time(bday, user_data["utc"])
    await message.answer(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {bday_str}\n–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_left}")

@router.message(F.text.lower().in_({"–¥—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "/group_birthday"}))
async def handle_group_birthday(message: Message):
    if message.chat.type == "private":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    group_members = [uid for uid in users if users[uid].get("birthday")]
    if not group_members:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    now = datetime.utcnow()
    upcoming = []
    for uid in group_members:
        data = users[uid]
        name = data.get("name", f"User {uid}")
        bday = datetime.strptime(data["birthday"], "%d.%m")
        time_left = calculate_birthday_time(bday, data["utc"])
        upcoming.append((name, time_left))

    upcoming.sort(key=lambda x: x[1])
    msg = "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + "\n".join(
        f"{name} ‚Äî —á–µ—Ä–µ–∑ {delta}" for name, delta in upcoming
    )
    await message.answer(msg)

@router.message(F.text.lower().in_({"–ø—Ä–∏–≤–µ—Ç", "/privet"}))
async def handle_privet(message: Message):
    await message.answer("–ë–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è –∫–Ω–æ–ø–∫–∞ :3")

@router.message(F.location)
async def handle_location(message: Message):
    user_id = message.from_user.id
    if user_id in users and users[user_id].get("stage") == "awaiting_utc":
        lon = message.location.longitude
        utc_offset = int(round(lon / 15))
        users[user_id]["utc"] = utc_offset
        await message.answer("–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à UTC!")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")

@router.message(F.text.regexp(r"^\d{1,2}\.\d{1,2}$"))
async def receive_birthday(message: Message):
    user_id = message.from_user.id
    try:
        datetime.strptime(message.text, "%d.%m")
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ 13.06")
        return

    users[user_id] = {
        "birthday": message.text,
        "stage": "awaiting_utc",
        "name": message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    }

    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]
    ], resize_keyboard=True)

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π UTC (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3)", reply_markup=kb)

@router.message(F.text.regexp(r"^[-+]?\d+$"))
async def receive_utc(message: Message):
    user_id = message.from_user.id
    try:
        users[user_id]["utc"] = int(message.text)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UTC –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3")
